ASEProject 
Group - 11
Team Members - 
1. S20180010030
2. S20180010047
3. S20180010061
4. S20180010067
5. S20180010136
6. S20180010158

Contributions by - 
Name - Sayam Kumar
Roll Number - S20180010158
ASE Section A

Project Name - OSINT-SPY
Project Github Link - https://github.com/Sayam753/ASEProject
Deployed at - http://ec2-54-81-70-14.compute-1.amazonaws.com/
Documentation Link - https://aseproject.readthedocs.io/

Project Description - 
OSINT stands for Open Source Intelligence. Our Project is about gathering as much information available from public resources. It saves much of overhead time taken by login/signups/google search. Through this, people can also see what their information is visible to people.

My Work - My main task is to capture information available from various public resources. This information has to integrated with both Frontend and Backend. I have completed about 70% of my work. Pending tasks to be completed for phase 2 evaluations are adding search for ssl, malware, twitter and facebook monitoring.
My contributions - https://github.com/Sayam753/ASEProject/commits?author=Sayam753

Technologies Used - 
I have used python libraries to make the process of capturing information easier.
1. Requests Library - To send requests to dedicated urls using APIs.
2. Json Library - To format the response in json
3. Argparser Library - To parse custom argument to python file
4. Time Library - To check for internet connection timeouts
5. Blockcypher Library - To capture information about bitcoins

APIs Used - 
1. Clear bit API - To find info about domain names
2. Shodan API - To find info about IP and devices
3. Full Contact API - To find info about emails
4. Virus Total API - To scan against malwares
5. Email Hunter API - To extract emails for a domain name
and tie with Frontend and Backend

I read the documentation of these APIs and made modules(see in zip) package that is accessible via command line. This work was done before frontend and backend people started working on the project.
The workflow of capturing the information is - First send the request, format the response in json, look for errors, send the reponse to frontend in json format.

Integrations with Backend - 
I have experience with Django from last 1.5 years. I have made a Django app named search to access my modules. For search bar, I have rendered a ModelForm. I have combined all searches into one function named query following a DRY approach.

Integrations with Frontend - 
For rendering json to html, I used templatetags of Django and populated fields using Jinja template. The templatetags are "any_tag" and "isinstance_tag" to filter out the json values with respect to its data types. See search/templates for all html related stuff.

Integrations with Testing - 
First, I learnt Unit Test and Pytest libraries. Then me and Isha focussed to write tests in Pytest as Pytest is more flexible than Unitest and provides more functionality. I worked closely with testing people to make sure code is running fine.

Documentation - 
I have used Sphinx and RST files to complete the documentation. The whole documentation can be found at https://aseproject.readthedocs.io/. Also see "docs" directory in zip. The old concept of markdown is not used. The documentation is auto generated means whenever I push the changes, docs will be automatically generated using "ReadTheDocs" webhook.

Deployment - 
I have deployed the project at - http://ec2-54-81-70-14.compute-1.amazonaws.com/
I have my personal website at https://codingpaths.com/. There I have written two blogs related to Django deployment last year. That saved me a lot of time. Basically I have setup uWSGI production server and used Nginx as reverse proxy. Nginx helps in automatically establishing connection to Django and also collects "error" and "access" logs for reference. All the deployment related files can be found in "deployment" directory in zip.

Thanks, Sayam Kumar - S20180010158
